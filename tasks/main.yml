---
# tasks file for letsencrypt-dns01    

- name: validate configuration
  fail:
    msg: need either acmeservers or route53 working
  when:
    - aws_key is not defined 
    - acmeservers is not defined

- name: validate account
  include_tasks: account-setup.yml

- name: Making sure crypto subdirectory is present
  file:
    name: "{{ host_specific_files }}/crypto"
    state: directory
    mode: 0700
    recurse: yes
  delegate_to: localhost

# SEE README.md for discussion of the {{ acmecnamezone }} variable and why it is a
# good workflow
#
# it is fine, btw, to have hosts with no A or AAAA records for them at all.  these hosts will
# just get a txt record, no ip address.  applications may include updating a bind view that
# faces LetsEncrypt's nameservers for the purposes of genning up certs for internal devices.

- name: Check for existance of the CNAME if using acmecnamezone (expect skip when healthy!)
  fail: msg="can't find CNAME for _acme-challenge.{{ cert_hostname | replace('*.','') }}"
  when: acmecnamezone is defined and lookup('dig', '_acme-challenge.' + cert_hostname | replace('*.',''), 'qtype=CNAME')=="NXDOMAIN"

- name: Check for existance of the CNAME if using acmecnamezone and SAN (expect skip when healthy!)
  fail: msg="can't find CNAME for _acme-challenge.{{ item.split(':', 1)[1] | replace('*.','') }}"
  when: subject_alt_names is defined and acmecnamezone is defined and
    lookup('dig', '_acme-challenge.'+ item.split(':', 1)[1] | replace('*.',''), 'qtype=CNAME')=="NXDOMAIN"
  with_items: "{{ subject_alt_names }}"

## BEGIN: conditionally use vault or local

- name: use vault
  include_tasks: main-vault.yml
  when: vault_cert_mount is defined

- name: use local files
  include_tasks: main-vault.yml
  when: vault_cert_mount is not defined

## END: conditionally use vault or local

- name: clean up the mess (nsupdate)
  include_tasks: clean-dns-nsupdate.yml
  when:
    - acmeservers is defined
    - dnschallenge.changed

- name: clean up the mess (route53)
  include_tasks: clean-dns-route53.yml
  when: aws_key is defined and dnschallenge.changed
